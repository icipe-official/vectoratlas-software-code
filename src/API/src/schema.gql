# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""bionomics data"""
type Bionomics {
  adult_data: Boolean
  contact_authors: Boolean
  contact_notes: String
  control: String
  control_notes: String
  data_abstracted_by: String
  data_checked_by: String
  id: String!
  insecticide_control: Boolean
  ir_data: String!
  itn_use: Boolean
  larval_site_data: Boolean
  month_end: Int
  month_start: Int
  rainfall_time: String
  season_calc: String
  season_given: String
  season_notes: String
  secondary_info: String
  study_sampling_design: String
  timestamp_end: DateTime
  timestamp_start: DateTime
  year_end: Int
  year_start: Int
}

input BoundsFilter {
  coords: [Coord!]
  locationWindowActive: Boolean!
}

input Coord {
  lat: Float
  long: Float
}

input CreateNewsInput {
  article: String!
  id: String
  image: String!
  summary: String!
  title: String!
}

input CreateReferenceInput {
  article_title: String!
  author: String!
  citation: String!
  journal_title: String!
  published: Boolean!
  report_type: String!
  v_data: Boolean!
  year: Float!
}

input CreateSpeciesInformationInput {
  description: String!
  id: String
  name: String!
  shortDescription: String!
  speciesImage: String!
}

"""dataset"""
type Dataset {
  ApprovedAt: [DateTime!]
  ApprovedBy: [String!]
  ReviewedAt: [DateTime!]
  ReviewedBy: [String!]
  UpdatedAt: DateTime
  UpdatedBy: String
  doi: String
  id: String!
  status: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Geometry scalar type"""
scalar GeoJSONPoint

type HomepageStats {
  countries: Float
  eventDownload: Float!
  pageViews: Float!
  recordsTotal: Float!
  uniqueViews: Float!
}

type ModelProcessingStatus {
  status: String!
}

type Mutation {
  createEditNews(input: CreateNewsInput!): News!
  createEditSpeciesInformation(input: CreateSpeciesInformationInput!): SpeciesInformation!
  createReference(input: CreateReferenceInput!): Reference!
  deleteNews(id: String!): Boolean!
  deleteSpeciesInformation(id: String!): Boolean!
  requestRoles(email: String!, requestReason: String!, rolesRequested: [String!]!): Boolean!
  updateUserRoles(input: UserRoleInput!): UserRole!
}

"""News stories for Vector Atlas"""
type News {
  article: String!
  id: String!
  image: String!
  lastUpdated: DateTime!
  summary: String!
  title: String!
}

"""occurrence data"""
type Occurrence {
  abundance_data: String!
  binary_presence: String!
  bionomics: Bionomics
  dec_check: String
  dec_id: String
  download_count: Int
  id: String!
  insecticideResistanceBioassays: Bionomics
  ir_data: String!
  map_check: String
  month_end: Int
  month_start: Int
  recorded_species: RecordedSpecies!
  reference: Reference!
  sample: Sample
  site: Site!
  timestamp_end: DateTime
  timestamp_start: DateTime
  vector_notes: String
  year_end: Int
  year_start: Int
}

input OccurrenceFilter {
  abundance_data: [String]
  binary_presence: [String]
  bionomics: [Boolean]
  control: [Boolean]
  country: [String!]
  endTimestamp: Float
  insecticide: [String]
  isAdult: [Boolean]
  isLarval: [Boolean]
  season: [String]
  species: [String!]
  startTimestamp: Float
}

type OccurrenceReturn {
  id: String!
  location: GeoJSONPoint!
  species: String
}

type PaginatedOccurrenceReturnData {
  hasMore: Boolean!
  items: [OccurrenceReturn!]!
  total: Int!
}

type PaginatedReferenceData {
  hasMore: Boolean!
  items: [Reference!]!
  total: Int!
}

type PaginatedStringData {
  hasMore: Boolean!
  items: [String!]!
  total: Int!
}

type Query {
  FullOccurrenceData(selectedIds: [String!]!): [Occurrence!]!
  OccurrenceCsvData(bounds: BoundsFilter, filters: OccurrenceFilter, skip: Float = 0, take: Float = 1): PaginatedStringData!
  OccurrenceData(bounds: BoundsFilter, filters: OccurrenceFilter, skip: Float = 0, take: Float = 1): PaginatedOccurrenceReturnData!
  allGeoData: Bionomics!
  allNews: [News!]!
  allReferenceData(endId: Float = null, order: String = "asc", orderBy: String = "num_id", skip: Float = 0, startId: Float = 1, take: Float = 1, textFilter: String = ""): PaginatedReferenceData!
  allSpeciesInformation: [SpeciesInformation!]!
  allUploadedDatasets: UploadedDataset
  allUserRoles: [UserWithRoles!]!
  datasetById(id: String!): Dataset
  geoData(id: String!): Bionomics!
  getHomepageAnalytics(endAt: Float!, startAt: Float!, timezone: String!, unit: String!): HomepageStats!
  newsById(id: String!): News!
  postProcessModel(blobLocation: String!, displayName: String!, maxValue: Float!, modelName: String!): ModelProcessingStatus!
  referenceData(id: String!): Reference!
  speciesInformationById(id: String!): SpeciesInformation!
  uploadedDatasetById(id: String!): UploadedDataset
  uploadedDatasetsByUploader: UploadedDataset
  userRole(id: String!): UserRole!
}

"""recorded species data"""
type RecordedSpecies {
  id: String!
  species: String!
  species_id_1: String
  species_id_2: String
  species_notes: String
}

"""reference data"""
type Reference {
  article_title: String
  author: String
  citation: String
  id: String!
  journal_title: String
  num_id: Int!
  published: Boolean
  report_type: String
  v_data: Boolean
  year: Int
}

"""sample data"""
type Sample {
  control: Boolean
  control_type: String!
  id: String!
  occurrence_n_1: Int
  occurrence_n_2: Int
  occurrence_n_3: Int
  occurrence_n_4: Int
  occurrence_n_tot: Int
  occurrence_notes: String!
  sampling_occurrence_1: String
  sampling_occurrence_2: String
  sampling_occurrence_3: String
  sampling_occurrence_4: String
}

"""site data"""
type Site {
  admin_level_1: String
  admin_level_2: String
  area_type: String
  confidence_in_georef: String
  country: String!
  georef_source: String
  id: String!
  latitude: String
  latitude_2: String
  latitude_3: String
  latitude_4: String
  latitude_5: String
  latitude_6: String
  latitude_7: String
  latitude_8: String
  location: GeoJSONPoint!
  location_2: GeoJSONPoint
  longitude: String
  longitude_2: String
  longitude_3: String
  longitude_4: String
  longitude_5: String
  longitude_6: String
  longitude_7: String
  longitude_8: String
  site: String!
  site_notes: String
}

"""Information for a particular species"""
type SpeciesInformation {
  description: String!
  distributionMapUrl: String!
  id: String!
  name: String!
  shortDescription: String!
  speciesImage: String!
}

"""uploaded dataset"""
type UploadedDataset {
  approved_by: [String!]
  approved_on: DateTime
  converted_file_name: String
  creation: DateTime!
  description: String!
  id: String!
  is_doi_requested: Boolean
  is_va_data: Boolean
  last_status_update_date: DateTime!
  last_upload_date: DateTime!
  modified: DateTime!
  owner: String
  primary_reviewers: [String!]
  provided_doi: String
  source_country: String!
  source_region: String!
  status: String!
  tertiary_reviewers: [String!]
  title: String!
  updater: String
  uploaded_file_name: String
  uploader_email: String
  uploader_name: String
  va_data_abstracted_by: String
  va_data_checked_by: String
  va_final_checked_by: String
}

"""user role data"""
type UserRole {
  auth0_id: String!
  is_admin: Boolean
  is_editor: Boolean
  is_reviewer: Boolean
  is_reviewer_manager: Boolean
  is_uploader: Boolean
}

input UserRoleInput {
  auth0_id: String!
  is_admin: Boolean
  is_editor: Boolean
  is_reviewer: Boolean
  is_reviewer_manager: Boolean
  is_uploader: Boolean
}

"""user role data"""
type UserWithRoles {
  auth0_id: String!
  email: String!
  is_admin: Boolean
  is_editor: Boolean
  is_review_manager: Boolean
  is_reviewer: Boolean
  is_uploader: Boolean
}